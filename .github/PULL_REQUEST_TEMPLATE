# Litter Patrol
Congratulations! You're submitting your assignment!

## Comprehension Questions
Question | Answer
--- | ---
How are events / event handlers and `this.state` connected? | Changes to the state are be triggered by an event which are handled by an event handler that updates the state.
What are two ways to do "dynamic styling" with React? When should they be used? | With inline styling or a seperate style sheet. Seperate style sheet is the preferred method at Ada. With inline you dont asssign a class name but write the css directly to the style attribute. A seperate style sheet allows better organization without cluttering up you components and they are more easily reussable by assigning the classname. In line is easy and fast and allows easier toggling of attributes.
Much like Rails works with the HTTP request->response cycle, React works with the browser's input->output cycle. Describe React's cycle from receiving user input to outputting different page content. | When the user takes an action on the DOM element and event is triggered which is handled by the event handller. The event handler takes the appropraite action by changing the state. The new state triggers a re-render. React calls the render methods for each component once it detects the change, it updates the DOM with the outcome of the render method.
Compare how React and Rails' views differ. Given different circumstances, these systems have different goals. How does this impact on their design and how we are supposed to use them? | Rails uses erb and reach uses jsx both templating languages. The difference comes with what they are used for. Erb is generated on the server and serves the entire html page with every click, jsx updates the portion of the page that you need to interact with and doesnt call the server unless it needs to retrive new information
What was a challenge you were able to overcome on this assignment? | Upon opening the files, the biggest challenge was simply understanding what was happening. There was a lot of code to go through and it was difficult to look through it all and make sense of it before I could even start to add new features.

## CS Fundamentals Questions
Question | Answer
--- | ---
Consider the code on the first few lines of `App.render` (it starts with `this.state.items.map`). What is the Big-O time complexity of this code, where n is the number of active game items? | O(n) with n being the number of active game items.
What part of React might benefit most from the use of specific data structure and algorithms? | The part that determines what has changed would benefit from a specific data structure and algorithm. Data structure could be a hash used to store the current state and future state. The algorithm would determine if the key is the same and the values is the same. If it is then that piece has not changed and if it isnt it will trigger a re-render
Consider what happens when React processes a state change from `setState` -- it must re-render all of the components that now have different content because of that change.<br>What kind of data structure are the components in, and what sort of algorithms would be appropriate for React's code to "traverse" those components?<br> Speculate wildly about what the Big-O time complexity of that code might be. | Data structure could be a tree structure. Algorithm would be O(n) because in re-rendering you may have to pass through every node. Tree traversal algorithm. Algorithm would look at the root of both the DOM and virtual DOM to see if they are the same, if it is it compare the children and so forth until it has determined which ones are different and replace the DOM with what is in the virtual DOM.
